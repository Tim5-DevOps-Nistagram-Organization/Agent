version: "3.8"
services:
    database:
      image: postgres:${POSTGRES_VERSION-13}
      container_name: postgres_agent
      restart: always
      environment:
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_DB: ${POSTGRES_DB}
      volumes:
        - database-data:/var/lib/postgresql/data
      networks:
        - static-network
      ports:
        - 5432:5432
      # desavalo se da se nekad poreke pre consul-servera i da mu zauzme staticku IP
      # sto je dovodilo do toga da docker-compose ne moze da se pokrene lepo
      depends_on:
        - consul-server

    consul-server:
      image: consul-server-agent
      build:
        context: .
        dockerfile: Dockerfile
        target: consulServerDev
      ports: 
        - "8500:8500"
      networks:
        static-network:
          ipv4_address: 172.16.0.2
 
    gateway:
      image: gateway
      build:
        context: .
        dockerfile: Dockerfile
        target: gatewayRuntimeDev
      environment:
        STAGE: ${STAGE}
        DATABASE_USERNAME: ${DATABASE_USERNAME}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        DATABASE_DOMAIN: ${DATABASE_DOMAIN}
        DATABASE_SCHEMA: ${DATABASE_SCHEMA}
      ports: 
        - "8080:8080"
      networks:
        - static-network
      depends_on:
        - consul-server
        - database


    agent-order-service:
      build: 
        context: .
        dockerfile: Dockerfile
        target: agentOrderServiceRuntimeDev
      container_name: agent-order
      environment:
        DATABASE_USERNAME: ${DATABASE_USERNAME}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        DATABASE_DOMAIN: ${DATABASE_DOMAIN}
        DATABASE_SCHEMA: ${DATABASE_SCHEMA}
        STAGE: ${STAGE}
      depends_on:
        - database
        - consul-server
      networks:
        - static-network
        
    agent-product-service:
      build: 
        context: .
        dockerfile: Dockerfile
        target: agentProductServiceRuntimeDev
      container_name: agent-product
      environment:
        DATABASE_USERNAME: ${DATABASE_USERNAME}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        DATABASE_DOMAIN: ${DATABASE_DOMAIN}
        DATABASE_SCHEMA: ${DATABASE_SCHEMA}
        STAGE: ${STAGE}
      depends_on:
        - database
        - consul-server
      networks:
        - static-network

    agent-report-service:
      build: 
        context: .
        dockerfile: Dockerfile
        target: agentReportServiceRuntimeDev
      container_name: agent-report
      environment:
        DATABASE_USERNAME: ${DATABASE_USERNAME}
        DATABASE_PASSWORD: ${DATABASE_PASSWORD}
        DATABASE_DOMAIN: ${DATABASE_DOMAIN}
        DATABASE_SCHEMA: ${DATABASE_SCHEMA}
        STAGE: ${STAGE}
      depends_on:
        - database
        - consul-server
      networks:
        - static-network

  # ===================>> monitoring services <<======================
    # prometheus:
    #   image: prom/prometheus:latest
    #   container_name: prometheus
    #   ports:
    #     - 9090:9090
    #   command:
    #     - --config.file=/etc/prometheus/prometheus.yml
    #   volumes:
    #     - ./monitoring/prometheus/:/etc/prometheus/
    #   networks:
    #     - static-network
    #   depends_on:
    #     - cadvisor
    #     - node-exporter

    # # monitor Linux machine
    # node-exporter:
    #   image: prom/node-exporter:v1.1.2
    #   container_name: node-exporter
    #   networks:
    #     - static-network
    #   ports:
    #     - 9100:9100
    #   depends_on:
    #     - cadvisor

    # # monitor containers
    # cadvisor:
    #   image: gcr.io/cadvisor/cadvisor:latest
    #   container_name: cadvisor
    #   ports:
    #     - 8081:8080
    #   volumes:
    #   - /:/rootfs:ro
    #   - /var/run:/var/run:rw
    #   - /sys:/sys:ro
    #   - /var/lib/docker/:/var/lib/docker:ro
    #   networks:
    #     - static-network
    #   depends_on:
    #     - agent-report-service
    #     - agent-product-service
    #     - agent-order-service

    # # visualise monitoring
    # grafana:
    #   image: grafana/grafana:7.5.2
    #   container_name: grafana
    #   restart: on-failure
    #   environment:
    #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    #   networks:
    #     - static-network
    #   ports:
    #     - 3000:3000
    #   volumes:
    #     - ./monitoring/grafana/provision/datasources:/etc/grafana/provisioning/datasources
    #     - ./monitoring/grafana/provision/dashboards:/etc/grafana/provisioning/dashboards
    #     - ./monitoring/grafana/data:/var/lib/grafana
    #   depends_on:
    #     - prometheus

volumes:
  database-data:
    name: server-database


networks:
  static-network:
    ipam:
      config:
        - subnet: 172.16.0.0/16