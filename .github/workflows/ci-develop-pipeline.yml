name: CI-develop

on:
  push:
    branches:
      - infrastructure-ci-pipeline

jobs:
    bash_skripta:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
        - name: Build and analyze
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    
          run: ./create-test-env-run-test.sh ${{ secrets.SONAR_TOKEN_PRODUCT }} ${{ secrets.SONAR_TOKEN_ORDER }} ${{ secrets.SONAR_TOKEN_REPORT }} ${GITHUB_REF#refs/heads/}
        
        - name: Bump version and push tag
          id: tag_version
          uses: mathieudutour/github-tag-action@v5.5
          with:
            default_bump: patch
            github_token: ${{ secrets.GITHUB_TOKEN }}

        - name: Echo tag
          run: echo "Novi tag ${{ steps.tag_version.outputs.new_tag }}"

        - name: Create a GitHub prerelease
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.tag_version.outputs.new_tag }}
            release_name: Prerelease ${{ steps.tag_version.outputs.new_tag }}
            body: ${{ steps.tag_version.outputs.changelog }}
            prerelease: true

        # nakon sto prodje staticku analizu koda onda tek krece da build-a image
        # tj ako prodje Quality Gate
        - name: Build docker image
          run: ./buildImage.sh "staging" ${{ steps.tag_version.outputs.new_tag }} ${{ secrets.DOCKERHUB_PASSWORD }} ${{ secrets.DOCKERHUB_USERNAME }}

      
        # pokreni CD pipeline na test-env
        - name: Emit repository_dispatch
          uses: mvasigh/dispatch-action@main
          with:
            # You should create a personal access token and store it in your repository
            token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
            event_type: ci_develop_pipeline_done
            message: |
              {
                "version": "${{ steps.tag_version.outputs.new_tag }}"
              }
              
            
        
